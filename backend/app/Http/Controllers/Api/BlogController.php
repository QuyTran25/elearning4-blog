<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Http\Requests\StoreBlogRequest;
use App\Http\Requests\UpdateBlogRequest;
use App\Http\Requests\UploadImageRequest;
use App\Models\Blog;
use Illuminate\Support\Facades\Storage;

class BlogController extends Controller
{
    // üü¢ 1. L·∫•y danh s√°ch blog (c√≥ t√¨m ki·∫øm + s·∫Øp x·∫øp)
    public function index(Request $request)
    {
        // Validate search v√† sort parameters
        $request->validate([
            'search' => 'nullable|string|max:255',
            'sort' => 'nullable|in:asc,desc',
        ]);

        $query = Blog::with('author');

        // T√¨m ki·∫øm theo ti√™u ƒë·ªÅ
        if ($request->has('search')) {
            $query->where('title', 'like', '%' . $request->search . '%');
        }

        // S·∫Øp x·∫øp (m·∫∑c ƒë·ªãnh: m·ªõi nh·∫•t)
        $sort = $request->get('sort', 'desc');
        $query->orderBy('created_at', $sort);

        $blogs = $query->get();

        return response()->json([
            'success' => true,
            'data' => $blogs
        ]);
    }

    // üü¢ 2. Xem chi ti·∫øt blog
    public function show($id)
    {
        $blog = Blog::with('author')->find($id);

        if (!$blog) {
            return response()->json([
                'success' => false,
                'message' => 'Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt'
            ], 404);
        }

        return response()->json([
            'success' => true,
            'data' => $blog
        ]);
    }

    // üü¢ 3. T·∫°o blog m·ªõi
    public function store(StoreBlogRequest $request)
    {
        // Validation t·ª± ƒë·ªông t·ª´ StoreBlogRequest

        // T·ª± ƒë·ªông l·∫•y author_id t·ª´ user ƒë√£ ƒëƒÉng nh·∫≠p
        $blog = Blog::create([
            'title' => $request->input('title'),
            'content' => $request->input('content'),
            'category_id' => $request->input('category_id'),
            'image_url' => $request->input('image_url'),
            'author_id' => auth()->id(), // L·∫•y t·ª´ user ƒë√£ ƒëƒÉng nh·∫≠p
        ]);

        // Load th√¥ng tin author ƒë·ªÉ tr·∫£ v·ªÅ
        $blog->load('author');

        return response()->json([
            'success' => true,
            'message' => 'T·∫°o blog th√†nh c√¥ng',
            'data' => $blog
        ], 201);
    }

    // üü¢ 4. C·∫≠p nh·∫≠t blog
    public function update(UpdateBlogRequest $request, $id)
    {
        // Validation t·ª± ƒë·ªông t·ª´ UpdateBlogRequest
        
        $blog = Blog::find($id);

        if (!$blog) {
            return response()->json([
                'success' => false,
                'message' => 'Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt'
            ], 404);
        }

        // Ki·ªÉm tra quy·ªÅn: ch·ªâ cho ph√©p t√°c gi·∫£ c·∫≠p nh·∫≠t blog c·ªßa ch√≠nh h·ªç
        if ($blog->author_id !== auth()->id()) {
            return response()->json([
                'success' => false,
                'message' => 'B·∫°n kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t b√†i vi·∫øt n√†y'
            ], 403);
        }

        // C·∫≠p nh·∫≠t th√¥ng tin - D√πng update() thay v√¨ g√°n tr·ª±c ti·∫øp
        $blog->update([
            'title' => $request->input('title'),
            'content' => $request->input('content'),
            'category_id' => $request->input('category_id'),
            'image_url' => $request->input('image_url'),
        ]);

        // Load l·∫°i th√¥ng tin author
        $blog->load('author');

        return response()->json([
            'success' => true,
            'message' => 'C·∫≠p nh·∫≠t blog th√†nh c√¥ng',
            'data' => $blog
        ], 200);
    }

    // üü¢ 5. X√≥a blog
    public function destroy($id)
    {
        $blog = Blog::find($id);

        if (!$blog) {
            return response()->json([
                'success' => false,
                'message' => 'Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt'
            ], 404);
        }

        // Ki·ªÉm tra quy·ªÅn: ch·ªâ cho ph√©p t√°c gi·∫£ x√≥a blog c·ªßa ch√≠nh h·ªç
        if ($blog->author_id !== auth()->id()) {
            return response()->json([
                'success' => false,
                'message' => 'B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a b√†i vi·∫øt n√†y'
            ], 403); // 403 Forbidden
        }

        // X√≥a ·∫£nh n·∫øu c√≥ (kh√¥ng b·∫Øt bu·ªôc v√¨ d√πng URL)
        if ($blog->image_url && strpos($blog->image_url, '/storage/') === 0) {
            $oldImage = str_replace('/storage/', '', $blog->image_url);
            Storage::disk('public')->delete($oldImage);
        }

        $blog->delete();

        return response()->json([
            'success' => true,
            'message' => 'X√≥a blog th√†nh c√¥ng'
        ], 200);
    }

    // üü¢ 6. Upload ·∫£nh blog
    public function upload(UploadImageRequest $request)
    {
        // Validation t·ª± ƒë·ªông t·ª´ UploadImageRequest

        if ($request->hasFile('image')) {
            // L∆∞u v√†o storage/app/public/blogs
            $path = $request->file('image')->store('blogs', 'public');
            
            // Tr·∫£ v·ªÅ URL ƒë·ªÉ frontend s·ª≠ d·ª•ng
            $url = '/storage/' . $path;
            
            return response()->json([
                'success' => true,
                'message' => 'Upload ·∫£nh th√†nh c√¥ng',
                'data' => [
                    'url' => $url,
                    'path' => $path
                ]
            ], 200);
        }

        return response()->json([
            'success' => false,
            'message' => 'Kh√¥ng c√≥ file ·∫£nh'
        ], 400);
    }
}
