// Blog storage utilities
const BLOGS_KEY = "tech_blog_posts"

// Function to get the current user
function getCurrentUser() {
  // Placeholder for user retrieval logic
  return { id: "admin", fullName: "Admin" }
}

// Get all blogs
function getAllBlogs() {
  const blogs = localStorage.getItem(BLOGS_KEY)
  return blogs ? JSON.parse(blogs) : []
}

// Save blogs
function saveBlogs(blogs) {
  localStorage.setItem(BLOGS_KEY, JSON.stringify(blogs))
}

// Get blog by ID
function getBlogById(id) {
  const blogs = getAllBlogs()
  return blogs.find((blog) => blog.id === id)
}

// Create blog
function createBlog(blogData) {
  const blogs = getAllBlogs()
  const user = getCurrentUser()

  const newBlog = {
    id: Date.now().toString(),
    title: blogData.title,
    category: blogData.category,
    content: blogData.content,
    image: blogData.image || null,
    author: {
      id: user.id,
      name: user.fullName,
    },
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  }

  blogs.push(newBlog)
  saveBlogs(blogs)

  return newBlog
}

// Update blog
function updateBlog(id, blogData) {
  const blogs = getAllBlogs()
  const index = blogs.findIndex((blog) => blog.id === id)

  if (index === -1) {
    return null
  }

  blogs[index] = {
    ...blogs[index],
    title: blogData.title,
    category: blogData.category,
    content: blogData.content,
    image: blogData.image !== undefined ? blogData.image : blogs[index].image,
    updatedAt: new Date().toISOString(),
  }

  saveBlogs(blogs)
  return blogs[index]
}

// Delete blog
function deleteBlog(id) {
  const blogs = getAllBlogs()
  const filteredBlogs = blogs.filter((blog) => blog.id !== id)
  saveBlogs(filteredBlogs)
  return true
}

// Search blogs
function searchBlogs(query) {
  const blogs = getAllBlogs()
  const lowerQuery = query.toLowerCase()

  return blogs.filter(
    (blog) =>
      blog.title.toLowerCase().includes(lowerQuery) ||
      blog.content.toLowerCase().includes(lowerQuery) ||
      blog.category.toLowerCase().includes(lowerQuery),
  )
}

// Sort blogs
function sortBlogs(blogs, sortBy) {
  const sorted = [...blogs]

  switch (sortBy) {
    case "newest":
      return sorted.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))
    case "oldest":
      return sorted.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt))
    case "title":
      return sorted.sort((a, b) => a.title.localeCompare(b.title))
    default:
      return sorted
  }
}

// Initialize with sample data if empty
function initializeSampleBlogs() {
  const blogs = getAllBlogs()

  if (blogs.length === 0) {
    const sampleBlogs = [
      {
        id: "1",
        title: "AI gi√∫p nh·∫≠n di·ªán h√¨nh ·∫£nh",
        category: "AI",
        content: `
          <h2>ü§ñ AI Nh·∫≠n Di·ªán H√¨nh ·∫¢nh - C√¥ng Ngh·ªá C·ªßa T∆∞∆°ng Lai</h2>
          <p>Tr√≠ tu·ªá nh√¢n t·∫°o trong nh·∫≠n di·ªán h√¨nh ·∫£nh ƒëang thay ƒë·ªïi c√°ch ch√∫ng ta t∆∞∆°ng t√°c v·ªõi c√¥ng ngh·ªá. T·ª´ vi·ªác m·ªü kh√≥a ƒëi·ªán tho·∫°i b·∫±ng khu√¥n m·∫∑t ƒë·∫øn vi·ªác t·ª± ƒë·ªông ph√¢n lo·∫°i h√†ng ng√†n b·ª©c ·∫£nh, AI ƒë√£ tr·ªü n√™n kh√¥ng th·ªÉ thi·∫øu.</p>

          <h3>üéØ ·ª®ng D·ª•ng Trong Cu·ªôc S·ªëng</h3>
          <ul>
            <li><strong>Nh·∫≠n di·ªán khu√¥n m·∫∑t:</strong> Face ID tr√™n iPhone, camera an ninh th√¥ng minh</li>
            <li><strong>Ph√¢n lo·∫°i ·∫£nh t·ª± ƒë·ªông:</strong> Google Photos t·ª± ƒë·ªông g·∫Øn th·∫ª ng∆∞·ªùi v√† ƒë·ªãa ƒëi·ªÉm</li>
            <li><strong>Y t·∫ø:</strong> Ph√°t hi·ªán b·ªánh t·ª´ h√¨nh ·∫£nh X-quang, MRI v·ªõi ƒë·ªô ch√≠nh x√°c cao</li>
            <li><strong>Xe t·ª± l√°i:</strong> Tesla s·ª≠ d·ª•ng AI ƒë·ªÉ nh·∫≠n di·ªán ƒë∆∞·ªùng, bi·ªÉn b√°o, ng∆∞·ªùi ƒëi b·ªô</li>
            <li><strong>B√°n l·∫ª:</strong> Amazon Go - c·ª≠a h√†ng kh√¥ng thu ng√¢n nh·ªù AI nh·∫≠n di·ªán s·∫£n ph·∫©m</li>
          </ul>

          <h3>‚öôÔ∏è C√¥ng Ngh·ªá ƒê·∫±ng Sau</h3>
          <p>AI nh·∫≠n di·ªán h√¨nh ·∫£nh s·ª≠ d·ª•ng <strong>Convolutional Neural Networks (CNN)</strong>, m·ªôt lo·∫°i m·∫°ng neural ƒë·∫∑c bi·ªát ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ x·ª≠ l√Ω d·ªØ li·ªáu h√¨nh ·∫£nh.</p>

          <pre><code>import tensorflow as tf
from tensorflow.keras import layers, models

# X√¢y d·ª±ng model CNN ƒë∆°n gi·∫£n
model = models.Sequential([
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(224, 224, 3)),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.Flatten(),
    layers.Dense(64, activation='relu'),
    layers.Dense(10, activation='softmax')
])

# Train model
model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

model.fit(train_images, train_labels, epochs=10)</code></pre>

          <h3>üîç Quy Tr√¨nh Ho·∫°t ƒê·ªông</h3>
          <ol>
            <li><strong>Thu th·∫≠p d·ªØ li·ªáu:</strong> H√†ng tri·ªáu h√¨nh ·∫£nh ƒë∆∞·ª£c g·∫Øn nh√£n</li>
            <li><strong>Ti·ªÅn x·ª≠ l√Ω:</strong> Resize, normalize, augmentation</li>
            <li><strong>Hu·∫•n luy·ªán:</strong> Model h·ªçc c√°ch nh·∫≠n di·ªán patterns t·ª´ d·ªØ li·ªáu</li>
            <li><strong>Ki·ªÉm th·ª≠:</strong> ƒê√°nh gi√° ƒë·ªô ch√≠nh x√°c tr√™n test set</li>
            <li><strong>Deploy:</strong> T√≠ch h·ª£p v√†o ·ª©ng d·ª•ng th·ª±c t·∫ø</li>
          </ol>

          <blockquote>
            "AI kh√¥ng thay th·∫ø con ng∆∞·ªùi trong vi·ªác nh·∫≠n di·ªán h√¨nh ·∫£nh, m√† gi√∫p ch√∫ng ta l√†m ƒëi·ªÅu ƒë√≥ nhanh h∆°n v√† ch√≠nh x√°c h∆°n h√†ng tri·ªáu l·∫ßn."
          </blockquote>

          <h3>üí° Th√°ch Th·ª©c</h3>
          <ul>
            <li>C·∫ßn dataset l·ªõn v√† ƒëa d·∫°ng</li>
            <li>Computational cost cao khi training</li>
            <li>Bias trong d·ªØ li·ªáu hu·∫•n luy·ªán</li>
            <li>Privacy concerns v·ªõi facial recognition</li>
          </ul>

          <h3>üöÄ T∆∞∆°ng Lai</h3>
          <p>C√¥ng ngh·ªá AI nh·∫≠n di·ªán h√¨nh ·∫£nh s·∫Ω ti·∫øp t·ª•c ph√°t tri·ªÉn v·ªõi:</p>
          <ul>
            <li>Real-time processing tr√™n thi·∫øt b·ªã edge</li>
            <li>3D object recognition</li>
            <li>Video understanding v√† action recognition</li>
            <li>Few-shot learning - h·ªçc v·ªõi √≠t d·ªØ li·ªáu h∆°n</li>
          </ul>
        `,
        image: "image/AI.jpg",
        author: { id: "user1", name: "Minh Khoa" },
        createdAt: "2025-10-14T00:00:00.000Z",
        updatedAt: "2025-10-14T00:00:00.000Z",
      },
      {
        id: "2",
        title: "L·ªô tr√¨nh h·ªçc l·∫≠p tr√¨nh web",
        category: "Fullstack",
        content: `
          <h2>üéØ L·ªô Tr√¨nh To√†n Di·ªán Tr·ªü Th√†nh Fullstack Developer</h2>
          <p>L·∫≠p tr√¨nh web fullstack l√† m·ªôt trong nh·ªØng k·ªπ nƒÉng ƒë∆∞·ª£c sƒÉn ƒë√≥n nh·∫•t hi·ªán nay. ƒê·ªÉ tr·ªü th√†nh m·ªôt fullstack developer gi·ªèi, b·∫°n c·∫ßn c√≥ l·ªô tr√¨nh h·ªçc t·∫≠p r√µ r√†ng v√† ki√™n tr√¨ th·ª±c h√†nh.</p>

          <h3>üìö Giai ƒêo·∫°n 1: Frontend C∆° B·∫£n (3-4 th√°ng)</h3>
          
          <h4>HTML & CSS</h4>
          <p>N·ªÅn t·∫£ng c·ªßa m·ªçi trang web:</p>
          <ul>
            <li>HTML5 semantic tags (header, nav, main, section, article)</li>
            <li>CSS Flexbox v√† Grid Layout</li>
            <li>Responsive Design v·ªõi Media Queries</li>
            <li>CSS animations v√† transitions</li>
            <li>SASS/SCSS preprocessor</li>
          </ul>

          <h4>JavaScript ES6+</h4>
          <pre><code>// Modern JavaScript features
const greet = (name) => \`Hello, \${name}!\`;

// Destructuring
const { name, age } = user;
const [first, second] = array;

// Spread operator
const newArray = [...oldArray, newItem];
const newObject = { ...oldObject, newProp: 'value' };

// Async/Await
async function fetchData() {
  try {
    const response = await fetch('/api/data');
    const data = await response.json();
    return data;
  } catch (error) {
    console.error('Error:', error);
  }
}</code></pre>

          <h3>‚öõÔ∏è Giai ƒêo·∫°n 2: React Framework (3-4 th√°ng)</h3>
          <p>React l√† framework frontend ph·ªï bi·∫øn nh·∫•t hi·ªán nay:</p>
          <ul>
            <li>JSX v√† Components</li>
            <li>Props v√† State Management</li>
            <li>React Hooks (useState, useEffect, useContext)</li>
            <li>React Router cho navigation</li>
            <li>Redux ho·∫∑c Zustand cho state management</li>
          </ul>

          <pre><code>// React Component v·ªõi Hooks
import React, { useState, useEffect } from 'react';

function UserProfile({ userId }) {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    async function loadUser() {
      const response = await fetch(\`/api/users/\${userId}\`);
      const data = await response.json();
      setUser(data);
      setLoading(false);
    }
    loadUser();
  }, [userId]);

  if (loading) return <div>Loading...</div>;
  
  return (
    <div>
      <h2>{user.name}</h2>
      <p>{user.email}</p>
    </div>
  );
}</code></pre>

          <h3>üîß Giai ƒêo·∫°n 3: Backend v·ªõi Node.js (4-5 th√°ng)</h3>
          <p>X√¢y d·ª±ng server v√† API:</p>
          <ul>
            <li>Node.js v√† NPM</li>
            <li>Express.js framework</li>
            <li>RESTful API design</li>
            <li>Authentication v·ªõi JWT</li>
            <li>Database: MongoDB ho·∫∑c PostgreSQL</li>
          </ul>

          <pre><code>// Express.js API
const express = require('express');
const app = express();

app.use(express.json());

// GET endpoint
app.get('/api/users', async (req, res) => {
  const users = await User.find();
  res.json(users);
});

// POST endpoint v·ªõi validation
app.post('/api/users', async (req, res) => {
  const { name, email, password } = req.body;
  
  // Validate
  if (!name || !email || !password) {
    return res.status(400).json({ error: 'Missing fields' });
  }
  
  // Create user
  const user = await User.create({ name, email, password });
  res.status(201).json(user);
});

app.listen(3000, () => console.log('Server running'));</code></pre>

          <h3>üóÑÔ∏è Giai ƒêo·∫°n 4: Database (2-3 th√°ng)</h3>
          <ul>
            <li><strong>SQL:</strong> PostgreSQL, MySQL - cho d·ªØ li·ªáu c√≥ c·∫•u tr√∫c</li>
            <li><strong>NoSQL:</strong> MongoDB - cho d·ªØ li·ªáu linh ho·∫°t</li>
            <li><strong>ORMs:</strong> Sequelize (SQL), Mongoose (MongoDB)</li>
            <li>Database design v√† normalization</li>
            <li>Indexing v√† query optimization</li>
          </ul>

          <h3>‚òÅÔ∏è Giai ƒêo·∫°n 5: DevOps Basics (2-3 th√°ng)</h3>
          <ul>
            <li><strong>Git & GitHub:</strong> Version control, branching, pull requests</li>
            <li><strong>Docker:</strong> Containerization</li>
            <li><strong>CI/CD:</strong> GitHub Actions, Jenkins</li>
            <li><strong>Cloud:</strong> Deploy l√™n AWS, Vercel, Heroku, DigitalOcean</li>
            <li><strong>Monitoring:</strong> Logging, error tracking</li>
          </ul>

          <blockquote>
            "H·ªçc l·∫≠p tr√¨nh kh√¥ng ph·∫£i l√† sprint, m√† l√† marathon. Ki√™n tr√¨ m·ªói ng√†y, b·∫°n s·∫Ω ƒë·∫°t ƒë∆∞·ª£c m·ª•c ti√™u!"
          </blockquote>

          <h3>üí° Tips ƒê·ªÉ Th√†nh C√¥ng</h3>
          <ol>
            <li><strong>Code m·ªói ng√†y:</strong> √çt nh·∫•t 2-3 ti·∫øng</li>
            <li><strong>Build projects:</strong> L√†m project th·ª±c t·∫ø, kh√¥ng ch·ªâ tutorial</li>
            <li><strong>Tham gia c·ªông ƒë·ªìng:</strong> Discord, Reddit, Facebook groups</li>
            <li><strong>ƒê·ªçc code ng∆∞·ªùi kh√°c:</strong> GitHub, open source projects</li>
            <li><strong>Vi·∫øt blog:</strong> Chia s·∫ª nh·ªØng g√¨ h·ªçc ƒë∆∞·ª£c</li>
            <li><strong>Networking:</strong> K·∫øt n·ªëi v·ªõi c√°c developer kh√°c</li>
          </ol>

          <h3>üìñ T√†i Nguy√™n H·ªçc T·∫≠p</h3>
          <ul>
            <li><strong>FreeCodeCamp:</strong> Kh√≥a h·ªçc mi·ªÖn ph√≠ ch·∫•t l∆∞·ª£ng</li>
            <li><strong>The Odin Project:</strong> L·ªô tr√¨nh fullstack ho√†n ch·ªânh</li>
            <li><strong>MDN Web Docs:</strong> T√†i li·ªáu ch√≠nh th·ªëng</li>
            <li><strong>YouTube:</strong> Traversy Media, Web Dev Simplified</li>
            <li><strong>Udemy:</strong> C√°c kh√≥a h·ªçc chuy√™n s√¢u</li>
          </ul>

          <p>Ch√∫c b·∫°n th√†nh c√¥ng tr√™n con ƒë∆∞·ªùng tr·ªü th√†nh Fullstack Developer! üí™</p>
        `,
        image: "image/h·ªçc fullstacsk.jpg",
        author: { id: "user2", name: "B·∫£o Tr√¢m" },
        createdAt: "2025-10-10T00:00:00.000Z",
        updatedAt: "2025-10-10T00:00:00.000Z",
      },
      {
        id: "3",
        title: "5 m·∫πo code s·∫°ch cho ng∆∞·ªùi m·ªõi",
        category: "Coding",
        content: `
          <h2>‚ú® Clean Code - Vi·∫øt Code Nh∆∞ M·ªôt Ngh·ªá Sƒ©</h2>
          <p>Code s·∫°ch kh√¥ng ch·ªâ gi√∫p b·∫°n m√† c√≤n gi√∫p c·∫£ team d·ªÖ ƒë·ªçc, d·ªÖ maintain v√† d·ªÖ m·ªü r·ªông. H√£y c√πng t√¨m hi·ªÉu 5 nguy√™n t·∫Øc c∆° b·∫£n!</p>

          <h3>1Ô∏è‚É£ ƒê·∫∑t T√™n Bi·∫øn R√µ R√†ng V√† C√≥ √ù Nghƒ©a</h3>
          <p>T√™n bi·∫øn n√™n th·ªÉ hi·ªán r√µ m·ª•c ƒë√≠ch v√† gi√° tr·ªã c·ªßa n√≥:</p>

          <pre><code>// ‚ùå BAD - T√™n bi·∫øn kh√¥ng r√µ r√†ng
const d = new Date();
const x = users.length;
const temp = calculate(a, b);

// ‚úÖ GOOD - T√™n bi·∫øn m√¥ t·∫£ r√µ r√†ng
const currentDate = new Date();
const totalUsers = users.length;
const userAverageScore = calculate(scores, weights);</code></pre>

          <h3>2Ô∏è‚É£ Chia Nh·ªè Functions - Single Responsibility</h3>
          <p>M·ªói function ch·ªâ n√™n l√†m m·ªôt vi·ªác duy nh·∫•t:</p>

          <pre><code>// ‚ùå BAD - Function l√†m qu√° nhi·ªÅu vi·ªác
function processOrder(order) {
  // Validate
  if (!order.items || order.items.length === 0) return false;
  
  // Calculate
  let total = 0;
  order.items.forEach(item => total += item.price * item.quantity);
  
  // Apply discount
  if (order.coupon) total *= 0.9;
  
  // Save to database
  db.orders.insert(order);
  
  // Send email
  sendEmail(order.customerEmail, total);
  
  return total;
}

// ‚úÖ GOOD - Chia nh·ªè th√†nh c√°c functions ri√™ng
function validateOrder(order) {
  return order.items && order.items.length > 0;
}

function calculateTotal(items) {
  return items.reduce((sum, item) => sum + item.price * item.quantity, 0);
}

function applyDiscount(total, coupon) {
  return coupon ? total * 0.9 : total;
}

function saveOrder(order) {
  return db.orders.insert(order);
}

function sendOrderConfirmation(email, total) {
  return sendEmail(email, total);
}

// Main function ch·ªâ orchestrate
function processOrder(order) {
  if (!validateOrder(order)) return false;
  
  let total = calculateTotal(order.items);
  total = applyDiscount(total, order.coupon);
  
  saveOrder(order);
  sendOrderConfirmation(order.customerEmail, total);
  
  return total;
}</code></pre>

          <h3>3Ô∏è‚É£ Comment H·ª£p L√Ω - Gi·∫£i Th√≠ch "T·∫°i Sao", Kh√¥ng Ph·∫£i "C√°i G√¨"</h3>
          <p>Code t·ªët t·ª± document ch√≠nh n√≥. Comment ch·ªâ n√™n gi·∫£i th√≠ch logic ph·ª©c t·∫°p:</p>

          <pre><code>// ‚ùå BAD - Comment r√µ r√†ng kh√¥ng c·∫ßn thi·∫øt
// TƒÉng i l√™n 1
i = i + 1;

// L·∫∑p qua m·∫£ng users
for (let user of users) {
  // In t√™n user
  console.log(user.name);
}

// ‚úÖ GOOD - Gi·∫£i th√≠ch l√Ω do
// Skip first row because it's the CSV header
for (let i = 1; i < data.length; i++) {
  processDataRow(data[i]);
}

// Use exponential backoff to avoid rate limiting from API
async function fetchWithRetry(url, maxRetries = 3) {
  for (let i = 0; i < maxRetries; i++) {
    try {
      return await fetch(url);
    } catch (error) {
      const delay = Math.pow(2, i) * 1000;
      await sleep(delay);
    }
  }
}</code></pre>

          <h3>4Ô∏è‚É£ DRY - Don't Repeat Yourself</h3>
          <p>Tr√°nh duplicate code b·∫±ng c√°ch t·∫°o reusable functions:</p>

          <pre><code>// ‚ùå BAD - Duplicate code
function validateUsername(username) {
  if (!username) return false;
  if (username.length < 3) return false;
  if (username.length > 20) return false;
  return /^[a-zA-Z0-9_]+$/.test(username);
}

function validateEmail(email) {
  if (!email) return false;
  if (email.length < 5) return false;
  if (email.length > 100) return false;
  return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);
}

// ‚úÖ GOOD - Reusable validation
function validateField(value, minLength, maxLength, pattern) {
  if (!value) return false;
  if (value.length < minLength || value.length > maxLength) return false;
  return pattern.test(value);
}

function validateUsername(username) {
  return validateField(username, 3, 20, /^[a-zA-Z0-9_]+$/);
}

function validateEmail(email) {
  return validateField(email, 5, 100, /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);
}</code></pre>

          <h3>5Ô∏è‚É£ Vi·∫øt Tests - Code C√≥ Th·ªÉ Tin C·∫≠y</h3>
          <p>Tests gi√∫p b·∫°n t·ª± tin refactor v√† ph√°t hi·ªán bugs s·ªõm:</p>

          <pre><code>// Unit test v·ªõi Jest
describe('calculateTotal', () => {
  test('should calculate total of items correctly', () => {
    const items = [
      { price: 10, quantity: 2 },
      { price: 20, quantity: 1 },
      { price: 5, quantity: 3 }
    ];
    expect(calculateTotal(items)).toBe(55); // 10*2 + 20*1 + 5*3
  });

  test('should return 0 for empty array', () => {
    expect(calculateTotal([])).toBe(0);
  });

  test('should handle items with zero quantity', () => {
    const items = [
      { price: 10, quantity: 0 },
      { price: 20, quantity: 1 }
    ];
    expect(calculateTotal(items)).toBe(20);
  });
});</code></pre>

          <blockquote>
            "Any fool can write code that a computer can understand. Good programmers write code that humans can understand." - Martin Fowler
          </blockquote>

          <h3>üéØ L·ª£i √çch C·ªßa Clean Code</h3>
          <ul>
            <li><strong>D·ªÖ maintain:</strong> S·ª≠a bugs v√† th√™m features nhanh h∆°n</li>
            <li><strong>√çt bugs:</strong> Code r√µ r√†ng gi·∫£m l·ªói logic</li>
            <li><strong>Team work t·ªët:</strong> ƒê·ªìng ƒë·ªôi d·ªÖ hi·ªÉu code c·ªßa b·∫°n</li>
            <li><strong>Onboard nhanh:</strong> Ng∆∞·ªùi m·ªõi d·ªÖ ti·∫øp c·∫≠n codebase</li>
            <li><strong>Refactor an to√†n:</strong> C√≥ tests ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng break</li>
          </ul>

          <h3>üìö T√†i Li·ªáu Tham Kh·∫£o</h3>
          <ul>
            <li>"Clean Code" by Robert C. Martin</li>
            <li>"The Pragmatic Programmer" by Andy Hunt</li>
            <li>"Refactoring" by Martin Fowler</li>
          </ul>

          <p>H√£y b·∫Øt ƒë·∫ßu √°p d·ª•ng nh·ªØng nguy√™n t·∫Øc n√†y v√†o code c·ªßa b·∫°n t·ª´ h√¥m nay! üí™</p>
        `,
        image: "image/m√£ code.jpg",
        author: { id: "user3", name: "H·ªØu Ph∆∞·ªõc" },
        createdAt: "2025-10-05T00:00:00.000Z",
        updatedAt: "2025-10-05T00:00:00.000Z",
      },
      {
        id: "4",
        title: "Internet of Things l√† g√¨?",
        category: "Network",
        content: `
          <h2>üåê IoT - K·∫øt N·ªëi V·∫°n V·∫≠t Tr√™n Internet</h2>
          <p>Internet of Things (IoT) l√† m·∫°ng l∆∞·ªõi c√°c thi·∫øt b·ªã v·∫≠t l√Ω ƒë∆∞·ª£c k·∫øt n·ªëi internet, c√≥ kh·∫£ nƒÉng thu th·∫≠p v√† chia s·∫ª d·ªØ li·ªáu. IoT ƒëang thay ƒë·ªïi c√°ch ch√∫ng ta s·ªëng v√† l√†m vi·ªác.</p>

          <h3>üè† IoT Trong Smart Home</h3>
          <p>Ng√¥i nh√† th√¥ng minh v·ªõi c√°c thi·∫øt b·ªã IoT:</p>
          <ul>
            <li><strong>ƒê√®n th√¥ng minh:</strong> ƒêi·ªÅu khi·ªÉn t·ª´ xa, t·ª± ƒë·ªông b·∫≠t/t·∫Øt theo l·ªãch ho·∫∑c c·∫£m bi·∫øn</li>
            <li><strong>Thermostat:</strong> Nest, Ecobee t·ª± ƒëi·ªÅu ch·ªânh nhi·ªát ƒë·ªô ti·∫øt ki·ªám ƒëi·ªán</li>
            <li><strong>Camera an ninh:</strong> Ring, Arlo - xem real-time, nh·∫≠n th√¥ng b√°o chuy·ªÉn ƒë·ªông</li>
            <li><strong>Kh√≥a c·ª≠a th√¥ng minh:</strong> August, Yale - m·ªü kh√≥a b·∫±ng smartphone, v√¢n tay</li>
            <li><strong>Loa th√¥ng minh:</strong> Alexa, Google Home - ƒëi·ªÅu khi·ªÉn gi·ªçng n√≥i</li>
            <li><strong>T·ªß l·∫°nh th√¥ng minh:</strong> Samsung Family Hub - qu·∫£n l√Ω th·ª±c ph·∫©m, ƒë·∫∑t h√†ng online</li>
          </ul>

          <h3>üè≠ IoT Trong C√¥ng Nghi·ªáp 4.0</h3>
          <p>Industrial IoT (IIoT) ƒëang c√°ch m·∫°ng h√≥a s·∫£n xu·∫•t:</p>
          <ul>
            <li><strong>Predictive Maintenance:</strong> Sensors ph√°t hi·ªán d·∫•u hi·ªáu h·ªèng h√≥c tr∆∞·ªõc khi x·∫£y ra</li>
            <li><strong>Supply Chain Management:</strong> Theo d√µi real-time v·ªã tr√≠ v√† t√¨nh tr·∫°ng h√†ng h√≥a</li>
            <li><strong>Quality Control:</strong> AI + IoT ki·ªÉm tra ch·∫•t l∆∞·ª£ng s·∫£n ph·∫©m t·ª± ƒë·ªông</li>
            <li><strong>Energy Management:</strong> T·ªëi ∆∞u h√≥a ti√™u th·ª• nƒÉng l∆∞·ª£ng nh√† m√°y</li>
            <li><strong>Worker Safety:</strong> Wearables theo d√µi s·ª©c kh·ªèe v√† v·ªã tr√≠ c√¥ng nh√¢n</li>
          </ul>

          <h3>‚öôÔ∏è Ki·∫øn Tr√∫c IoT</h3>
          <p>M·ªôt h·ªá th·ªëng IoT ƒëi·ªÉn h√¨nh g·ªìm 4 layers:</p>

          <ol>
            <li><strong>Device Layer:</strong> Sensors, actuators thu th·∫≠p d·ªØ li·ªáu</li>
            <li><strong>Network Layer:</strong> WiFi, Bluetooth, LoRaWAN, 5G truy·ªÅn d·ªØ li·ªáu</li>
            <li><strong>Platform Layer:</strong> Cloud x·ª≠ l√Ω, l∆∞u tr·ªØ d·ªØ li·ªáu (AWS IoT, Azure IoT Hub)</li>
            <li><strong>Application Layer:</strong> Mobile app, web dashboard hi·ªÉn th·ªã v√† ƒëi·ªÅu khi·ªÉn</li>
          </ol>

          <h3>üíª L·∫≠p Tr√¨nh IoT</h3>
          <p>Example v·ªõi MQTT protocol - chu·∫©n messaging cho IoT:</p>

          <pre><code>// Node.js v·ªõi MQTT
const mqtt = require('mqtt');
const client = mqtt.connect('mqtt://broker.hivemq.com');

client.on('connect', () => {
  console.log('Connected to MQTT broker');
  
  // Subscribe to temperature sensor topic
  client.subscribe('home/living-room/temperature');
  
  // Publish command to turn on light
  client.publish('home/living-room/light', JSON.stringify({
    status: 'on',
    brightness: 80,
    color: 'warm-white'
  }));
});

// Handle incoming messages
client.on('message', (topic, message) => {
  const data = JSON.parse(message.toString());
  console.log(\`\${topic}: \${data.value}¬∞C\`);
  
  // Auto control: Turn on AC if temperature > 28¬∞C
  if (data.value > 28) {
    client.publish('home/living-room/ac', JSON.stringify({
      status: 'on',
      temperature: 25
    }));
  }
});</code></pre>

          <h3>üîê B·∫£o M·∫≠t IoT</h3>
          <p>IoT devices th∆∞·ªùng l√† target c·ªßa hackers. C√°c bi·ªán ph√°p b·∫£o m·∫≠t:</p>
          <ul>
            <li><strong>Authentication:</strong> X√°c th·ª±c thi·∫øt b·ªã tr∆∞·ªõc khi k·∫øt n·ªëi</li>
            <li><strong>Encryption:</strong> M√£ h√≥a d·ªØ li·ªáu v·ªõi TLS/SSL</li>
            <li><strong>Firmware Updates:</strong> C·∫≠p nh·∫≠t b·∫£o m·∫≠t th∆∞·ªùng xuy√™n</li>
            <li><strong>Network Segmentation:</strong> T√°ch IoT devices ra subnet ri√™ng</li>
            <li><strong>Monitoring:</strong> Ph√°t hi·ªán h√†nh vi b·∫•t th∆∞·ªùng</li>
          </ul>

          <pre><code>// Security best practices
// 1. Use environment variables for credentials
const mqttOptions = {
  username: process.env.MQTT_USERNAME,
  password: process.env.MQTT_PASSWORD,
  protocol: 'mqtts', // Use TLS
  port: 8883
};

// 2. Validate all incoming data
function validateSensorData(data) {
  if (typeof data.value !== 'number') return false;
  if (data.value < -50 || data.value > 100) return false; // Range check
  return true;
}

// 3. Rate limiting
let lastMessageTime = 0;
const MIN_INTERVAL = 1000; // 1 second

client.on('message', (topic, message) => {
  const now = Date.now();
  if (now - lastMessageTime < MIN_INTERVAL) {
    console.log('Rate limit exceeded');
    return;
  }
  lastMessageTime = now;
  
  // Process message...
});</code></pre>

          <blockquote>
            "By 2030, there will be over 125 billion IoT devices worldwide, transforming every aspect of our lives."
          </blockquote>

          <h3>üöÄ Xu H∆∞·ªõng T∆∞∆°ng Lai</h3>
          <ul>
            <li><strong>5G Networks:</strong> T·ªëc ƒë·ªô cao, ƒë·ªô tr·ªÖ th·∫•p cho IoT</li>
            <li><strong>Edge Computing:</strong> X·ª≠ l√Ω d·ªØ li·ªáu ngay t·∫°i thi·∫øt b·ªã, gi·∫£m latency</li>
            <li><strong>AI Integration:</strong> IoT + AI = AIoT - thi·∫øt b·ªã t·ª± h·ªçc v√† t·ªëi ∆∞u</li>
            <li><strong>Digital Twins:</strong> M√¥ ph·ªèng s·ªë h√≥a c·ªßa ƒë·ªëi t∆∞·ª£ng v·∫≠t l√Ω</li>
            <li><strong>Blockchain:</strong> B·∫£o m·∫≠t giao d·ªãch gi·ªØa c√°c IoT devices</li>
          </ul>

          <h3>üí° B·∫Øt ƒê·∫ßu V·ªõi IoT</h3>
          <p>Hardware ph·ªï bi·∫øn cho beginners:</p>
          <ul>
            <li><strong>Arduino:</strong> D·ªÖ h·ªçc, nhi·ªÅu tutorials, gi√° r·∫ª (~200k VNƒê)</li>
            <li><strong>Raspberry Pi:</strong> M·∫°nh h∆°n, ch·∫°y Linux, ph√π h·ª£p projects ph·ª©c t·∫°p</li>
            <li><strong>ESP32/ESP8266:</strong> WiFi built-in, r·∫•t ph·ªï bi·∫øn cho IoT (~50k VNƒê)</li>
            <li><strong>Sensors:</strong> DHT11 (nhi·ªát ƒë·ªô), HC-SR04 (kho·∫£ng c√°ch), MQ-2 (kh√≠ gas)</li>
          </ul>

          <h3>üìö H·ªçc IoT</h3>
          <ul>
            <li><strong>Courses:</strong> Coursera - Introduction to IoT</li>
            <li><strong>Books:</strong> "Getting Started with IoT" by Cuno Pfister</li>
            <li><strong>Communities:</strong> Arduino Forum, Raspberry Pi Forum</li>
            <li><strong>Projects:</strong> Hackster.io, Instructables</li>
          </ul>

          <p>H√£y b·∫Øt ƒë·∫ßu d·ª± √°n IoT ƒë·∫ßu ti√™n c·ªßa b·∫°n ngay h√¥m nay! üîß</p>
        `,
        image: "image/m·∫°ng to√†n c·∫ßu.jpg",
        author: { id: "user4", name: "Thanh T√πng" },
        createdAt: "2025-10-01T00:00:00.000Z",
        updatedAt: "2025-10-01T00:00:00.000Z",
      },
      {
        id: "5",
        title: "Machine Learning c∆° b·∫£n",
        category: "AI",
        content: `
          <h2>üß† Machine Learning - D·∫°y M√°y T√≠nh T·ª± H·ªçc</h2>
          <p>Machine Learning (ML) l√† nh√°nh c·ªßa AI cho ph√©p m√°y t√≠nh h·ªçc t·ª´ d·ªØ li·ªáu v√† c·∫£i thi·ªán performance m√† kh√¥ng c·∫ßn l·∫≠p tr√¨nh c·ª• th·ªÉ t·ª´ng b∆∞·ªõc.</p>

          <h3>üìä 3 Lo·∫°i Machine Learning</h3>
          
          <h4>1. Supervised Learning (H·ªçc C√≥ Gi√°m S√°t)</h4>
          <p>Model h·ªçc t·ª´ d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c g·∫Øn nh√£n:</p>
          <ul>
            <li><strong>Classification:</strong> Ph√¢n lo·∫°i email spam/kh√¥ng spam, nh·∫≠n di·ªán ch·ªØ s·ªë vi·∫øt tay</li>
            <li><strong>Regression:</strong> D·ª± ƒëo√°n gi√° nh√†, gi√° c·ªï phi·∫øu, nhi·ªát ƒë·ªô</li>
          </ul>

          <pre><code>from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Sample data: House prices prediction
# Features: [size_sqft, bedrooms, age]
X = np.array([
    [1000, 2, 10],
    [1500, 3, 5],
    [2000, 3, 8],
    [2500, 4, 2],
    [3000, 4, 15]
])
y = np.array([200000, 300000, 350000, 450000, 400000])

# Split data
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# Train model
model = LinearRegression()
model.fit(X_train, y_train)

# Predict
y_pred = model.predict(X_test)

# Evaluate
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'MSE: {mse}')
print(f'R¬≤ Score: {r2}')

# Predict new house
new_house = np.array([[1800, 3, 7]])
predicted_price = model.predict(new_house)
print(f'Predicted price: ${predicted_price[0]:,.0f}')</code></pre>

          <h4>2. Unsupervised Learning (H·ªçc Kh√¥ng Gi√°m S√°t)</h4>
          <p>T√¨m patterns trong d·ªØ li·ªáu kh√¥ng c√≥ nh√£n:</p>
          <ul>
            <li><strong>Clustering:</strong> Ph√¢n nh√≥m kh√°ch h√†ng (customer segmentation)</li>
            <li><strong>Dimensionality Reduction:</strong> PCA, t-SNE gi·∫£m s·ªë chi·ªÅu d·ªØ li·ªáu</li>
            <li><strong>Anomaly Detection:</strong> Ph√°t hi·ªán giao d·ªãch gian l·∫≠n</li>
          </ul>

          <pre><code>from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

# Customer segmentation example
# Features: [monthly_spending, visit_frequency]
customers = np.array([
    [100, 2], [120, 3], [150, 2],  # Low spenders
    [500, 8], [450, 10], [550, 9], # High spenders
    [250, 5], [280, 6], [300, 5]   # Medium spenders
])

# K-Means clustering
kmeans = KMeans(n_clusters=3, random_state=42)
clusters = kmeans.fit_predict(customers)

# Visualize
plt.scatter(customers[:, 0], customers[:, 1], c=clusters, cmap='viridis')
plt.scatter(kmeans.cluster_centers_[:, 0], 
           kmeans.cluster_centers_[:, 1], 
           s=300, c='red', marker='X')
plt.xlabel('Monthly Spending ($)')
plt.ylabel('Visit Frequency')
plt.title('Customer Segmentation')
plt.show()</code></pre>

          <h4>3. Reinforcement Learning (H·ªçc TƒÉng C∆∞·ªùng)</h4>
          <p>Agent h·ªçc c√°ch h√†nh ƒë·ªông trong m√¥i tr∆∞·ªùng ƒë·ªÉ maximize reward:</p>
          <ul>
            <li><strong>Game AI:</strong> AlphaGo, OpenAI Five ch∆°i game ·ªü level pro</li>
            <li><strong>Robotics:</strong> Robot t·ª± h·ªçc ƒëi, n·∫Øm v·∫≠t</li>
            <li><strong>Self-driving:</strong> Xe t·ª± l√°i h·ªçc ƒëi·ªÅu khi·ªÉn t·ª´ kinh nghi·ªám</li>
          </ul>

          <h3>üõ†Ô∏è Quy Tr√¨nh ML Project</h3>
          <ol>
            <li><strong>Define Problem:</strong> X√°c ƒë·ªãnh v·∫•n ƒë·ªÅ c·∫ßn gi·∫£i quy·∫øt</li>
            <li><strong>Collect Data:</strong> Kaggle, APIs, web scraping</li>
            <li><strong>Explore Data:</strong> Visualize, statistics, understand distributions</li>
            <li><strong>Clean Data:</strong> Handle missing values, outliers, duplicates</li>
            <li><strong>Feature Engineering:</strong> T·∫°o features m·ªõi, scaling, encoding</li>
            <li><strong>Select Model:</strong> Th·ª≠ nhi·ªÅu algorithms, so s√°nh performance</li>
            <li><strong>Train Model:</strong> Fit model v·ªõi training data</li>
            <li><strong>Evaluate:</strong> Test accuracy, precision, recall, F1-score</li>
            <li><strong>Tune Hyperparameters:</strong> Grid search, random search</li>
            <li><strong>Deploy:</strong> API, web app, mobile app</li>
          </ol>

          <h3>üìö Thu·∫≠t To√°n Ph·ªï Bi·∫øn</h3>
          <table>
            <tr>
              <th>Algorithm</th>
              <th>Use Case</th>
              <th>Pros</th>
              <th>Cons</th>
            </tr>
            <tr>
              <td>Linear Regression</td>
              <td>D·ª± ƒëo√°n gi√° tr·ªã li√™n t·ª•c</td>
              <td>ƒê∆°n gi·∫£n, nhanh</td>
              <td>Ch·ªâ v·ªõi linear relationships</td>
            </tr>
            <tr>
              <td>Logistic Regression</td>
              <td>Binary classification</td>
              <td>D·ªÖ interpret</td>
              <td>Kh√¥ng t·ªët v·ªõi non-linear</td>
            </tr>
            <tr>
              <td>Decision Trees</td>
              <td>Classification, Regression</td>
              <td>D·ªÖ visualize</td>
              <td>D·ªÖ overfit</td>
            </tr>
            <tr>
              <td>Random Forest</td>
              <td>Classification, Regression</td>
              <td>Accurate, robust</td>
              <td>Slow, kh√≥ interpret</td>
            </tr>
            <tr>
              <td>SVM</td>
              <td>Classification</td>
              <td>T·ªët v·ªõi high-dimensional</td>
              <td>Slow v·ªõi large dataset</td>
            </tr>
            <tr>
              <td>Neural Networks</td>
              <td>Complex patterns</td>
              <td>R·∫•t powerful</td>
              <td>C·∫ßn nhi·ªÅu data, slow train</td>
            </tr>
          </table>

          <h3>üíº ·ª®ng D·ª•ng Th·ª±c T·∫ø</h3>
          <ul>
            <li><strong>Netflix:</strong> Recommendation systems g·ª£i √Ω phim</li>
            <li><strong>Google:</strong> Search ranking, Google Translate, Gmail spam filter</li>
            <li><strong>Tesla:</strong> Autopilot self-driving cars</li>
            <li><strong>Banks:</strong> Credit scoring, fraud detection</li>
            <li><strong>Healthcare:</strong> Disease prediction, drug discovery</li>
            <li><strong>E-commerce:</strong> Product recommendations, dynamic pricing</li>
          </ul>

          <blockquote>
            "Machine Learning is the science of getting computers to learn without being explicitly programmed." - Andrew Ng
          </blockquote>

          <h3>üéì Roadmap H·ªçc ML</h3>
          <ol>
            <li><strong>Prerequisites (1-2 th√°ng)</strong>
              <ul>
                <li>Python basics</li>
                <li>NumPy, Pandas</li>
                <li>Matplotlib, Seaborn</li>
                <li>To√°n: Linear Algebra, Calculus, Statistics</li>
              </ul>
            </li>
            <li><strong>Core ML (3-4 th√°ng)</strong>
              <ul>
                <li>Supervised Learning algorithms</li>
                <li>Unsupervised Learning</li>
                <li>Model evaluation metrics</li>
                <li>Scikit-learn library</li>
              </ul>
            </li>
            <li><strong>Deep Learning (3-4 th√°ng)</strong>
              <ul>
                <li>Neural Networks basics</li>
                <li>CNNs cho Computer Vision</li>
                <li>RNNs, LSTMs cho NLP</li>
                <li>TensorFlow ho·∫∑c PyTorch</li>
              </ul>
            </li>
            <li><strong>MLOps (2-3 th√°ng)</strong>
              <ul>
                <li>Model deployment</li>
                <li>CI/CD for ML</li>
                <li>Monitoring v√† retraining</li>
              </ul>
            </li>
          </ol>

          <h3>üìñ T√†i Nguy√™n H·ªçc ML</h3>
          <ul>
            <li><strong>Courses:</strong> Andrew Ng's ML course (Coursera), Fast.ai</li>
            <li><strong>Books:</strong> "Hands-On Machine Learning" by Aur√©lien G√©ron</li>
            <li><strong>Practice:</strong> Kaggle competitions, Google Colab notebooks</li>
            <li><strong>Communities:</strong> Reddit r/MachineLearning, Kaggle forums</li>
          </ul>

          <p>B·∫Øt ƒë·∫ßu h√†nh tr√¨nh Machine Learning c·ªßa b·∫°n ngay h√¥m nay! üöÄ</p>
        `,
        image: "image/AI.jpg",
        author: { id: "user5", name: "ƒê·ª©c Anh" },
        createdAt: "2025-10-08T00:00:00.000Z",
        updatedAt: "2025-10-08T00:00:00.000Z",
      },
      {
        id: "6",
        title: "Node.js v√† Express cho backend",
        category: "Fullstack",
        content: `
          <h2>üöÄ Node.js & Express - JavaScript Everywhere</h2>
          <p>Node.js cho ph√©p ch·∫°y JavaScript ·ªü backend, m·ªü ra kh·∫£ nƒÉng fullstack development v·ªõi c√πng m·ªôt ng√¥n ng·ªØ. Express.js l√† framework minimal v√† linh ho·∫°t nh·∫•t cho Node.js.</p>

          <h3>‚ö° T·∫°i Sao Ch·ªçn Node.js?</h3>
          <ul>
            <li><strong>Non-blocking I/O:</strong> X·ª≠ l√Ω h√†ng ng√†n requests ƒë·ªìng th·ªùi</li>
            <li><strong>JavaScript Everywhere:</strong> C√πng ng√¥n ng·ªØ frontend-backend</li>
            <li><strong>NPM:</strong> 2+ tri·ªáu packages, largest ecosystem</li>
            <li><strong>Performance:</strong> V8 engine c·ªßa Chrome, nhanh v√† efficient</li>
            <li><strong>Scalability:</strong> D·ªÖ scale horizontally</li>
            <li><strong>Real-time:</strong> Ho√†n h·∫£o cho WebSocket, chat apps</li>
          </ul>

          <h3>üîß Express.js Basics</h3>
          <p>Express l√† unopinionated framework - linh ho·∫°t nh∆∞ng c·∫ßn structure t·ªët:</p>

          <pre><code>// Basic Express server
const express = require('express');
const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(express.json()); // Parse JSON body
app.use(express.urlencoded({ extended: true })); // Parse URL-encoded

// Simple route
app.get('/', (req, res) => {
  res.json({ message: 'Welcome to my API!' });
});

// Route with parameters
app.get('/users/:id', (req, res) => {
  const userId = req.params.id;
  res.json({ userId, name: 'John Doe' });
});

// POST route
app.post('/users', (req, res) => {
  const { name, email } = req.body;
  // Save to database...
  res.status(201).json({ 
    message: 'User created',
    user: { name, email }
  });
});

// Start server
app.listen(PORT, () => {
  console.log(\\\`Server running on http://localhost:\\\${PORT}\\\`);
});</code></pre>

          <h3>üóÑÔ∏è K·∫øt N·ªëi Database</h3>
          
          <h4>MongoDB v·ªõi Mongoose</h4>
          <pre><code>const mongoose = require('mongoose');

// Connect to MongoDB
mongoose.connect('mongodb://localhost/myapp', {
  useNewUrlParser: true,
  useUnifiedTopology: true
});

// Define Schema
const userSchema = new mongoose.Schema({
  name: {
    type: String,
    required: [true, 'Name is required'],
    minlength: 3,
    maxlength: 50
  },
  email: {
    type: String,
    required: true,
    unique: true,
    lowercase: true,
    match: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/
  },
  age: {
    type: Number,
    min: 0,
    max: 120
  },
  createdAt: {
    type: Date,
    default: Date.now
  }
});

// Create Model
const User = mongoose.model('User', userSchema);

// CRUD Operations
// Create
const newUser = new User({
  name: 'John Doe',
  email: 'john@example.com',
  age: 25
});
await newUser.save();

// Read
const users = await User.find({ age: { $gte: 18 } }); // Users >= 18
const user = await User.findById(userId);
const user2 = await User.findOne({ email: 'john@example.com' });

// Update
await User.updateOne(
  { email: 'john@example.com' },
  { $set: { age: 26 } }
);

// Delete
await User.deleteOne({ _id: userId });</code></pre>

          <h3>üîê Authentication v·ªõi JWT</h3>
          <p>JSON Web Tokens cho stateless authentication:</p>

          <pre><code>const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');

// Register
app.post('/api/register', async (req, res) => {
  try {
    const { name, email, password } = req.body;
    
    // Check if user exists
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).json({ error: 'Email already registered' });
    }
    
    // Hash password
    const hashedPassword = await bcrypt.hash(password, 10);
    
    // Create user
    const user = new User({
      name,
      email,
      password: hashedPassword
    });
    await user.save();
    
    res.status(201).json({ message: 'User registered successfully' });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Login
app.post('/api/login', async (req, res) => {
  try {
    const { email, password } = req.body;
    
    // Find user
    const user = await User.findOne({ email });
    if (!user) {
      return res.status(401).json({ error: 'Invalid credentials' });
    }
    
    // Check password
    const validPassword = await bcrypt.compare(password, user.password);
    if (!validPassword) {
      return res.status(401).json({ error: 'Invalid credentials' });
    }
    
    // Generate JWT
    const token = jwt.sign(
      { userId: user._id, email: user.email },
      process.env.JWT_SECRET,
      { expiresIn: '7d' }
    );
    
    res.json({ 
      token,
      user: {
        id: user._id,
        name: user.name,
        email: user.email
      }
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Authentication Middleware
function authenticateToken(req, res, next) {
  const authHeader = req.header('Authorization');
  const token = authHeader && authHeader.replace('Bearer ', '');
  
  if (!token) {
    return res.status(401).json({ error: 'Access denied. No token provided.' });
  }
  
  try {
    const verified = jwt.verify(token, process.env.JWT_SECRET);
    req.user = verified;
    next();
  } catch (error) {
    res.status(400).json({ error: 'Invalid token' });
  }
}

// Protected route
app.get('/api/profile', authenticateToken, async (req, res) => {
  const user = await User.findById(req.user.userId).select('-password');
  res.json(user);
});</code></pre>

          <h3>üõ°Ô∏è Error Handling & Validation</h3>
          <pre><code>// Input validation v·ªõi Joi
const Joi = require('joi');

const userValidationSchema = Joi.object({
  name: Joi.string().min(3).max(50).required(),
  email: Joi.string().email().required(),
  password: Joi.string().min(6).required(),
  age: Joi.number().min(0).max(120)
});

app.post('/api/users', async (req, res) => {
  // Validate input
  const { error, value } = userValidationSchema.validate(req.body);
  if (error) {
    return res.status(400).json({ error: error.details[0].message });
  }
  
  // Process validated data
  // ...
});

// Global error handling middleware
app.use((err, req, res, next) => {
  console.error(err.stack);
  
  // Mongoose validation error
  if (err.name === 'ValidationError') {
    return res.status(400).json({
      error: 'Validation Error',
      details: Object.values(err.errors).map(e => e.message)
    });
  }
  
  // JWT error
  if (err.name === 'JsonWebTokenError') {
    return res.status(401).json({ error: 'Invalid token' });
  }
  
  // Default error
  res.status(500).json({
    error: 'Internal Server Error',
    message: process.env.NODE_ENV === 'development' ? err.message : undefined
  });
});</code></pre>

          <h3>‚öôÔ∏è Best Practices</h3>
          <ul>
            <li><strong>Environment Variables:</strong> D√πng dotenv, kh√¥ng commit .env</li>
            <li><strong>Security:</strong> helmet.js, rate limiting, input validation</li>
            <li><strong>CORS:</strong> Configure ƒë√∫ng origins</li>
            <li><strong>Logging:</strong> Winston, Morgan cho production</li>
            <li><strong>Error Handling:</strong> Try-catch, global error middleware</li>
            <li><strong>Database:</strong> Connection pooling, indexes</li>
            <li><strong>Testing:</strong> Jest, Supertest</li>
            <li><strong>Documentation:</strong> Swagger/OpenAPI</li>
          </ul>

          <pre><code>// Security setup
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
const cors = require('cors');

// Helmet for security headers
app.use(helmet());

// Rate limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100 // limit each IP to 100 requests per windowMs
});
app.use('/api/', limiter);

// CORS
app.use(cors({
  origin: process.env.CLIENT_URL,
  credentials: true
}));</code></pre>

          <blockquote>
            "Node.js enables JavaScript everywhere, making full-stack development seamless and efficient."
          </blockquote>

          <h3>üöÄ Deploy</h3>
          <p>C√°c platform ƒë·ªÉ deploy Node.js app:</p>
          <ul>
            <li><strong>Heroku:</strong> Free tier, d·ªÖ deploy v·ªõi Git</li>
            <li><strong>Vercel:</strong> T·ªëi ∆∞u cho serverless functions</li>
            <li><strong>Railway:</strong> Modern alternative cho Heroku</li>
            <li><strong>AWS:</strong> EC2, Lambda, Elastic Beanstalk</li>
            <li><strong>DigitalOcean:</strong> App Platform, Droplets (VPS)</li>
            <li><strong>Render:</strong> Free tier, auto-deploy t·ª´ GitHub</li>
          </ul>

          <h3>üìö T√†i Nguy√™n H·ªçc T·∫≠p</h3>
          <ul>
            <li><strong>Docs:</strong> expressjs.com, nodejs.org/docs</li>
            <li><strong>Courses:</strong> Node.js - The Complete Guide (Udemy)</li>
            <li><strong>Books:</strong> "Node.js Design Patterns"</li>
            <li><strong>GitHub:</strong> Study popular repos, contribute to open source</li>
          </ul>

          <p>B·∫Øt ƒë·∫ßu x√¢y d·ª±ng API ƒë·∫ßu ti√™n c·ªßa b·∫°n v·ªõi Node.js v√† Express ngay h√¥m nay! üí™</p>
        `,
        image: "image/h·ªçc fullstacsk.jpg",
        author: { id: "user6", name: "Quang Huy" },
        createdAt: "2025-10-03T00:00:00.000Z",
        updatedAt: "2025-10-03T00:00:00.000Z",
      },
    ]

    saveBlogs(sampleBlogs)
  }
}
